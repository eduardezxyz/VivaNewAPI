// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewVivaApi.Data;

#nullable disable

namespace NewVivaApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250805172811_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.AdminUser", b =>
                {
                    b.Property<int>("AdminUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdminUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminUserId"));

                    b.Property<DateTimeOffset>("CreateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UserID");

                    b.HasKey("AdminUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AdminUsers");
                });

            modelBuilder.Entity("NewVivaApi.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetRoles");

                    b.HasIndex(new[] { "Name" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("NewVivaApi.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("ResetPasswordOnLoginTf")
                        .HasColumnType("bit")
                        .HasColumnName("ResetPasswordOnLoginTF");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUsers");

                    b.HasIndex(new[] { "UserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.HasTrigger("AspNetUsers_FlagResetPassword_I");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("NewVivaApi.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUserClaims");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("NewVivaApi.Models.AspNetUserExtension", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordResetIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiration")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("AspNetUserExtensions", t =>
                        {
                            t.HasTrigger("AspNetUserExtensions_ClearExpired");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("NewVivaApi.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("NewVivaApi.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("Bucket")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CreateByUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("CreateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentTypeID");

                    b.Property<string>("DownloadFileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("GeneralContractorId")
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorID");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("PayAppId")
                        .HasColumnType("int")
                        .HasColumnName("PayAppID");

                    b.Property<int?>("SubcontractorId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    b.Property<int?>("SubcontractorProjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorProjectID");

                    b.HasKey("DocumentId");

                    b.HasIndex("GeneralContractorId");

                    b.HasIndex("PayAppId");

                    b.HasIndex("SubcontractorId");

                    b.HasIndex("SubcontractorProjectId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("NewVivaApi.Models.DocumentsVw", b =>
                {
                    b.Property<string>("Bucket")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CreateByUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("CreateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentTypeID");

                    b.Property<string>("DownloadFileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("GeneralContractorId")
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorID");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("PayAppId")
                        .HasColumnType("int")
                        .HasColumnName("PayAppID");

                    b.Property<int?>("SubcontractorId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    b.Property<int?>("SubcontractorProjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorProjectID");

                    b.ToTable((string)null);

                    b.ToView("Documents_vw", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.GeneralContractor", b =>
                {
                    b.Property<int>("GeneralContractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneralContractorId"));

                    b.Property<DateTimeOffset>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<string>("DommainName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("GeneralContractorName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("JsonAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LogoImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("StatusID");

                    b.Property<string>("VivaGeneralContractorId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VivaGeneralContractorID");

                    b.HasKey("GeneralContractorId");

                    b.ToTable("GeneralContractors");
                });

            modelBuilder.Entity("NewVivaApi.Models.GeneralContractorUser", b =>
                {
                    b.Property<int>("GeneralContractorUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneralContractorUserId"));

                    b.Property<bool>("CanApproveTf")
                        .HasColumnType("bit")
                        .HasColumnName("CanApproveTF");

                    b.Property<DateTimeOffset>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<int>("GeneralContractorId")
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorID");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UserID");

                    b.HasKey("GeneralContractorUserId");

                    b.HasIndex("GeneralContractorId");

                    b.HasIndex("UserId");

                    b.ToTable("GeneralContractorUsers");
                });

            modelBuilder.Entity("NewVivaApi.Models.GeneralContractorsVw", b =>
                {
                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DommainName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("GeneralContractorId")
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorID");

                    b.Property<string>("GeneralContractorName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("JsonAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("NumSubs")
                        .HasColumnType("decimal(38, 2)");

                    b.Property<decimal?>("Outstanding")
                        .HasColumnType("decimal(38, 2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("VivaGeneralContractorId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VivaGeneralContractorID");

                    b.ToTable((string)null);

                    b.ToView("GeneralContractors_vw", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.PayApp", b =>
                {
                    b.Property<int>("PayAppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayAppID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayAppId"));

                    b.Property<DateTimeOffset?>("ApprovalDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ApprovalDT");

                    b.Property<decimal?>("ApprovedAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTimeOffset>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<string>("HistoryAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("SubcontractorProjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorProjectID");

                    b.Property<string>("VivaPayAppId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VivaPayAppID");

                    b.HasKey("PayAppId");

                    b.HasIndex("SubcontractorProjectId");

                    b.ToTable("PayApps", t =>
                        {
                            t.HasTrigger("AfterInsertAddHistoryRecord_Trigger");

                            t.HasTrigger("AfterUpdateAddHistoryRecord_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("NewVivaApi.Models.PayAppHistory", b =>
                {
                    b.Property<int>("PayAppHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayAppHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayAppHistoryId"));

                    b.Property<DateTimeOffset>("CreateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LowestPermToView")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PayAppId")
                        .HasColumnType("int")
                        .HasColumnName("PayAppID");

                    b.HasKey("PayAppHistoryId")
                        .HasName("PK_PayAppHistory_1");

                    b.HasIndex("PayAppId");

                    b.ToTable("PayAppHistory", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.PayAppHistoryVw", b =>
                {
                    b.Property<DateTimeOffset>("CreateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LowestPermToView")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PayAppHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayAppHistoryID");

                    b.Property<int>("PayAppId")
                        .HasColumnType("int")
                        .HasColumnName("PayAppID");

                    b.ToTable((string)null);

                    b.ToView("PayAppHistory_vw", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.PayAppPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTimeOffset>("CreateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<decimal>("DollarAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("JsonAttributes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PayAppId")
                        .HasColumnType("int")
                        .HasColumnName("PayAppID");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentTypeID");

                    b.Property<int?>("SubcontractorId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    b.HasKey("PaymentId");

                    b.HasIndex("PayAppId");

                    b.HasIndex("SubcontractorId");

                    b.ToTable("PayAppPayments");
                });

            modelBuilder.Entity("NewVivaApi.Models.PayAppPaymentsVw", b =>
                {
                    b.Property<DateTimeOffset>("CreateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<decimal>("DollarAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("JsonAttributes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PayAppId")
                        .HasColumnType("int")
                        .HasColumnName("PayAppID");

                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentTypeID");

                    b.Property<int?>("SubcontractorId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    b.ToTable((string)null);

                    b.ToView("PayAppPayments_vw", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.PayAppsUnMaskedVw", b =>
                {
                    b.Property<DateTimeOffset?>("ApprovalDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ApprovalDT");

                    b.Property<decimal?>("ApprovedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("GeneralContractorId")
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorID");

                    b.Property<string>("JsonAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayAppId")
                        .HasColumnType("int")
                        .HasColumnName("PayAppID");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("SubcontractorId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    b.Property<int>("SubcontractorProjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorProjectID");

                    b.Property<string>("VivaPayAppId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VivaPayAppID");

                    b.ToTable((string)null);

                    b.ToView("PayApps_unMasked_vw", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.PayAppsVw", b =>
                {
                    b.Property<DateTimeOffset?>("ApprovalDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ApprovalDT");

                    b.Property<decimal?>("ApprovedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GeneralContractorId")
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorID");

                    b.Property<string>("JsonAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayAppId")
                        .HasColumnType("int")
                        .HasColumnName("PayAppID");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("SubcontractorId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    b.Property<int>("SubcontractorProjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorProjectID");

                    b.Property<string>("VivaPayAppId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VivaPayAppID");

                    b.ToTable((string)null);

                    b.ToView("PayApps_vw", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTime>("CreateDt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateDT");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeleteDt")
                        .HasColumnType("datetime")
                        .HasColumnName("DeleteDT");

                    b.Property<int>("GeneralContractorId")
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorID");

                    b.Property<string>("JsonAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDT");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("StartDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("StartDT");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("VivaProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VivaProjectID");

                    b.HasKey("ProjectId");

                    b.HasIndex("GeneralContractorId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("NewVivaApi.Models.ProjectsVw", b =>
                {
                    b.Property<int>("GeneralContractorId")
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorID");

                    b.Property<string>("JsonAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("StartDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("StartDT");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<decimal?>("UnpaidBalance")
                        .HasColumnType("decimal(38, 2)");

                    b.Property<string>("VivaProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VivaProjectID");

                    b.ToTable((string)null);

                    b.ToView("Projects_vw", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("CreateDt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateDT");

                    b.Property<DateTime?>("DeleteDt")
                        .HasColumnType("datetime")
                        .HasColumnName("DeleteDT");

                    b.Property<DateTime?>("LastUpdateDt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDT");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VivaReportId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VivaReportID");

                    b.HasKey("ReportId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("NewVivaApi.Models.ReportsVw", b =>
                {
                    b.Property<DateTime>("CreateDt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateDT");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VivaReportId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VivaReportID");

                    b.ToTable((string)null);

                    b.ToView("Reports_vw", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.ServiceUser", b =>
                {
                    b.Property<int>("ServiceUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceUserId"));

                    b.Property<string>("BearerToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UserID");

                    b.Property<string>("WebHookUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("WebHookURL");

                    b.HasKey("ServiceUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceUsers");
                });

            modelBuilder.Entity("NewVivaApi.Models.Subcontractor", b =>
                {
                    b.Property<int>("SubcontractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubcontractorId"));

                    b.Property<DateTimeOffset>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<string>("JsonAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("LastUpdateUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("SubcontractorName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VivaSubcontractorId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VivaSubcontractorID");

                    b.HasKey("SubcontractorId");

                    b.ToTable("Subcontractors");
                });

            modelBuilder.Entity("NewVivaApi.Models.SubcontractorProject", b =>
                {
                    b.Property<int>("SubcontractorProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorProjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubcontractorProjectId"));

                    b.Property<DateTimeOffset>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<decimal>("DiscountPct")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("JsonAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("StatusID");

                    b.Property<int>("SubcontractorId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    b.HasKey("SubcontractorProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubcontractorId");

                    b.ToTable("SubcontractorProjects");
                });

            modelBuilder.Entity("NewVivaApi.Models.SubcontractorProjectsVw", b =>
                {
                    b.Property<string>("Contact")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("DiscountPct")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("GeneralContractorId")
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorID");

                    b.Property<string>("JsonAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("SubcontractorId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    b.Property<string>("SubcontractorName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SubcontractorProjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorProjectID");

                    b.ToTable((string)null);

                    b.ToView("SubcontractorProjects_vw", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.SubcontractorUser", b =>
                {
                    b.Property<int>("SubcontractorUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubcontractorUserId"));

                    b.Property<DateTimeOffset>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SubcontractorId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UserID");

                    b.HasKey("SubcontractorUserId");

                    b.HasIndex("SubcontractorId");

                    b.HasIndex("UserId");

                    b.ToTable("SubcontractorUsers");
                });

            modelBuilder.Entity("NewVivaApi.Models.SubcontractorsVw", b =>
                {
                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JsonAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("SubcontractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    b.Property<string>("SubcontractorName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VivaSubcontractorId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VivaSubcontractorID");

                    b.ToTable((string)null);

                    b.ToView("Subcontractors_vw", (string)null);
                });

            modelBuilder.Entity("NewVivaApi.Models.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UserID");

                    b.Property<DateTimeOffset>("CreateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreateDT");

                    b.Property<DateTimeOffset?>("DeleteDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DeleteDT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("LastUpdateDt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastUpdateDT");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId")
                        .HasName("PK_UserProfile");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("NewVivaApi.Models.UserProfilesVw", b =>
                {
                    b.Property<string>("CompanyName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(501)
                        .HasColumnType("nvarchar(501)");

                    b.Property<int?>("GeneralContractorId")
                        .HasColumnType("int")
                        .HasColumnName("GeneralContractorID");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SubcontractorId")
                        .HasColumnType("int")
                        .HasColumnName("SubcontractorID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("UserType")
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)");

                    b.ToTable((string)null);

                    b.ToView("UserProfiles_vw", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("NewVivaApi.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                    b.HasOne("NewVivaApi.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");
                });

            modelBuilder.Entity("NewVivaApi.Models.AdminUser", b =>
                {
                    b.HasOne("NewVivaApi.Models.AspNetUser", "User")
                        .WithMany("AdminUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminUsers_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewVivaApi.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("NewVivaApi.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewVivaApi.Models.AspNetUserExtension", b =>
                {
                    b.HasOne("NewVivaApi.Models.AspNetUser", "IdNavigation")
                        .WithOne("AspNetUserExtension")
                        .HasForeignKey("NewVivaApi.Models.AspNetUserExtension", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserExtensions_AspNetUsers");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("NewVivaApi.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("NewVivaApi.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewVivaApi.Models.Document", b =>
                {
                    b.HasOne("NewVivaApi.Models.GeneralContractor", "GeneralContractor")
                        .WithMany("Documents")
                        .HasForeignKey("GeneralContractorId")
                        .HasConstraintName("FK_Documents_GeneralContractors");

                    b.HasOne("NewVivaApi.Models.PayApp", "PayApp")
                        .WithMany("Documents")
                        .HasForeignKey("PayAppId")
                        .HasConstraintName("FK_Documents_PayApps");

                    b.HasOne("NewVivaApi.Models.Subcontractor", "Subcontractor")
                        .WithMany("Documents")
                        .HasForeignKey("SubcontractorId")
                        .HasConstraintName("FK_Documents_Subcontractors");

                    b.HasOne("NewVivaApi.Models.SubcontractorProject", "SubcontractorProject")
                        .WithMany("Documents")
                        .HasForeignKey("SubcontractorProjectId")
                        .HasConstraintName("FK_Documents_SubcontractorProjects");

                    b.Navigation("GeneralContractor");

                    b.Navigation("PayApp");

                    b.Navigation("Subcontractor");

                    b.Navigation("SubcontractorProject");
                });

            modelBuilder.Entity("NewVivaApi.Models.GeneralContractorUser", b =>
                {
                    b.HasOne("NewVivaApi.Models.GeneralContractor", "GeneralContractor")
                        .WithMany("GeneralContractorUsers")
                        .HasForeignKey("GeneralContractorId")
                        .IsRequired()
                        .HasConstraintName("FK_GeneralContractorUsers_GeneralContractors");

                    b.HasOne("NewVivaApi.Models.AspNetUser", "User")
                        .WithMany("GeneralContractorUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_GeneralContractorUsers_AspNetUsers");

                    b.Navigation("GeneralContractor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewVivaApi.Models.PayApp", b =>
                {
                    b.HasOne("NewVivaApi.Models.SubcontractorProject", "SubcontractorProject")
                        .WithMany("PayApps")
                        .HasForeignKey("SubcontractorProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_PayApps_SubcontractorProjects");

                    b.Navigation("SubcontractorProject");
                });

            modelBuilder.Entity("NewVivaApi.Models.PayAppHistory", b =>
                {
                    b.HasOne("NewVivaApi.Models.PayApp", "PayApp")
                        .WithMany("PayAppHistories")
                        .HasForeignKey("PayAppId")
                        .IsRequired()
                        .HasConstraintName("FK_PayAppHistory_PayApps");

                    b.Navigation("PayApp");
                });

            modelBuilder.Entity("NewVivaApi.Models.PayAppPayment", b =>
                {
                    b.HasOne("NewVivaApi.Models.PayApp", "PayApp")
                        .WithMany("PayAppPayments")
                        .HasForeignKey("PayAppId")
                        .IsRequired()
                        .HasConstraintName("FK_PayAppPayments_PayApps");

                    b.HasOne("NewVivaApi.Models.Subcontractor", "Subcontractor")
                        .WithMany("PayAppPayments")
                        .HasForeignKey("SubcontractorId")
                        .HasConstraintName("FK_PayAppPayments_Subcontractors");

                    b.Navigation("PayApp");

                    b.Navigation("Subcontractor");
                });

            modelBuilder.Entity("NewVivaApi.Models.Project", b =>
                {
                    b.HasOne("NewVivaApi.Models.GeneralContractor", "GeneralContractor")
                        .WithMany("Projects")
                        .HasForeignKey("GeneralContractorId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_GeneralContractors");

                    b.Navigation("GeneralContractor");
                });

            modelBuilder.Entity("NewVivaApi.Models.ServiceUser", b =>
                {
                    b.HasOne("NewVivaApi.Models.AspNetUser", "User")
                        .WithMany("ServiceUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceUsers_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewVivaApi.Models.SubcontractorProject", b =>
                {
                    b.HasOne("NewVivaApi.Models.Project", "Project")
                        .WithMany("SubcontractorProjects")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_SubcontractorProjects_Projects");

                    b.HasOne("NewVivaApi.Models.Subcontractor", "Subcontractor")
                        .WithMany("SubcontractorProjects")
                        .HasForeignKey("SubcontractorId")
                        .IsRequired()
                        .HasConstraintName("FK_SubcontractorProjects_Subcontractors");

                    b.Navigation("Project");

                    b.Navigation("Subcontractor");
                });

            modelBuilder.Entity("NewVivaApi.Models.SubcontractorUser", b =>
                {
                    b.HasOne("NewVivaApi.Models.Subcontractor", "Subcontractor")
                        .WithMany("SubcontractorUsers")
                        .HasForeignKey("SubcontractorId")
                        .IsRequired()
                        .HasConstraintName("FK_SubcontractorUsers_Subcontractors");

                    b.HasOne("NewVivaApi.Models.AspNetUser", "User")
                        .WithMany("SubcontractorUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_SubcontractorUsers_AspNetUsers");

                    b.Navigation("Subcontractor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewVivaApi.Models.UserProfile", b =>
                {
                    b.HasOne("NewVivaApi.Models.AspNetUser", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("NewVivaApi.Models.UserProfile", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProfile_UserProfile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewVivaApi.Models.AspNetUser", b =>
                {
                    b.Navigation("AdminUsers");

                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserExtension");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("GeneralContractorUsers");

                    b.Navigation("ServiceUsers");

                    b.Navigation("SubcontractorUsers");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("NewVivaApi.Models.GeneralContractor", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("GeneralContractorUsers");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("NewVivaApi.Models.PayApp", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("PayAppHistories");

                    b.Navigation("PayAppPayments");
                });

            modelBuilder.Entity("NewVivaApi.Models.Project", b =>
                {
                    b.Navigation("SubcontractorProjects");
                });

            modelBuilder.Entity("NewVivaApi.Models.Subcontractor", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("PayAppPayments");

                    b.Navigation("SubcontractorProjects");

                    b.Navigation("SubcontractorUsers");
                });

            modelBuilder.Entity("NewVivaApi.Models.SubcontractorProject", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("PayApps");
                });
#pragma warning restore 612, 618
        }
    }
}
